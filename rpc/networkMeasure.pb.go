// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkMeasure.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LatencyRequest struct {
	Per                  int32    `protobuf:"varint,1,opt,name=per,proto3" json:"per,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatencyRequest) Reset()         { *m = LatencyRequest{} }
func (m *LatencyRequest) String() string { return proto.CompactTextString(m) }
func (*LatencyRequest) ProtoMessage()    {}
func (*LatencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d41a1ee73c334d, []int{0}
}

func (m *LatencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatencyRequest.Unmarshal(m, b)
}
func (m *LatencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatencyRequest.Marshal(b, m, deterministic)
}
func (m *LatencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatencyRequest.Merge(m, src)
}
func (m *LatencyRequest) XXX_Size() int {
	return xxx_messageInfo_LatencyRequest.Size(m)
}
func (m *LatencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatencyRequest proto.InternalMessageInfo

func (m *LatencyRequest) GetPer() int32 {
	if m != nil {
		return m.Per
	}
	return 0
}

type LatencyReply struct {
	Delays               []int64  `protobuf:"varint,1,rep,packed,name=delays,proto3" json:"delays,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatencyReply) Reset()         { *m = LatencyReply{} }
func (m *LatencyReply) String() string { return proto.CompactTextString(m) }
func (*LatencyReply) ProtoMessage()    {}
func (*LatencyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d41a1ee73c334d, []int{1}
}

func (m *LatencyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatencyReply.Unmarshal(m, b)
}
func (m *LatencyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatencyReply.Marshal(b, m, deterministic)
}
func (m *LatencyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatencyReply.Merge(m, src)
}
func (m *LatencyReply) XXX_Size() int {
	return xxx_messageInfo_LatencyReply.Size(m)
}
func (m *LatencyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LatencyReply.DiscardUnknown(m)
}

var xxx_messageInfo_LatencyReply proto.InternalMessageInfo

func (m *LatencyReply) GetDelays() []int64 {
	if m != nil {
		return m.Delays
	}
	return nil
}

func init() {
	proto.RegisterType((*LatencyRequest)(nil), "rpc.LatencyRequest")
	proto.RegisterType((*LatencyReply)(nil), "rpc.LatencyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkMeasureClient is the client API for NetworkMeasure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkMeasureClient interface {
	PredictLatency(ctx context.Context, in *LatencyRequest, opts ...grpc.CallOption) (*LatencyReply, error)
}

type networkMeasureClient struct {
	cc *grpc.ClientConn
}

func NewNetworkMeasureClient(cc *grpc.ClientConn) NetworkMeasureClient {
	return &networkMeasureClient{cc}
}

func (c *networkMeasureClient) PredictLatency(ctx context.Context, in *LatencyRequest, opts ...grpc.CallOption) (*LatencyReply, error) {
	out := new(LatencyReply)
	err := c.cc.Invoke(ctx, "/rpc.NetworkMeasure/PredictLatency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkMeasureServer is the server API for NetworkMeasure service.
type NetworkMeasureServer interface {
	PredictLatency(context.Context, *LatencyRequest) (*LatencyReply, error)
}

func RegisterNetworkMeasureServer(s *grpc.Server, srv NetworkMeasureServer) {
	s.RegisterService(&_NetworkMeasure_serviceDesc, srv)
}

func _NetworkMeasure_PredictLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkMeasureServer).PredictLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NetworkMeasure/PredictLatency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkMeasureServer).PredictLatency(ctx, req.(*LatencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkMeasure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NetworkMeasure",
	HandlerType: (*NetworkMeasureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PredictLatency",
			Handler:    _NetworkMeasure_PredictLatency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkMeasure.proto",
}

func init() { proto.RegisterFile("networkMeasure.proto", fileDescriptor_45d41a1ee73c334d) }

var fileDescriptor_45d41a1ee73c334d = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0xf6, 0x4d, 0x4d, 0x2c, 0x2e, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x52, 0xe2, 0xe2, 0xf3, 0x49, 0x2c, 0x49, 0xcd, 0x4b, 0xae,
	0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0x2e, 0x48, 0x2d, 0x92, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x95, 0xd4, 0xb8, 0x78, 0xe0, 0x6a, 0x0a, 0x72, 0x2a,
	0x85, 0xc4, 0xb8, 0xd8, 0x52, 0x52, 0x73, 0x12, 0x2b, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0x98,
	0x83, 0xa0, 0x3c, 0x23, 0x1f, 0x2e, 0x3e, 0x3f, 0x14, 0x8b, 0x84, 0xac, 0xb8, 0xf8, 0x02, 0x8a,
	0x52, 0x53, 0x32, 0x93, 0x4b, 0xa0, 0x06, 0x08, 0x09, 0xeb, 0x15, 0x15, 0x24, 0xeb, 0xa1, 0x5a,
	0x29, 0x25, 0x88, 0x2a, 0x58, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xa5, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x80, 0xa3, 0x38, 0xbe, 0xbd, 0x00, 0x00, 0x00,
}
