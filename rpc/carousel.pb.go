// Code generated by protoc-gen-go. DO NOT EDIT.
// source: carousel.proto

package rpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitResult struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	Result               bool     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResult) Reset()         { *m = CommitResult{} }
func (m *CommitResult) String() string { return proto.CompactTextString(m) }
func (*CommitResult) ProtoMessage()    {}
func (*CommitResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{0}
}

func (m *CommitResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResult.Unmarshal(m, b)
}
func (m *CommitResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResult.Marshal(b, m, deterministic)
}
func (m *CommitResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResult.Merge(m, src)
}
func (m *CommitResult) XXX_Size() int {
	return xxx_messageInfo_CommitResult.Size(m)
}
func (m *CommitResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResult proto.InternalMessageInfo

func (m *CommitResult) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *CommitResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type Transaction struct {
	TxnId                    string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	ReadKeyList              []string `protobuf:"bytes,2,rep,name=readKeyList,proto3" json:"readKeyList,omitempty"`
	WriteKeyList             []string `protobuf:"bytes,3,rep,name=writeKeyList,proto3" json:"writeKeyList,omitempty"`
	ParticipatedPartitionIds []int32  `protobuf:"varint,4,rep,packed,name=participatedPartitionIds,proto3" json:"participatedPartitionIds,omitempty"`
	EstimateArrivalTimes     []int64  `protobuf:"varint,5,rep,packed,name=estimateArrivalTimes,proto3" json:"estimateArrivalTimes,omitempty"`
	CoordPartitionId         int32    `protobuf:"varint,6,opt,name=coordPartitionId,proto3" json:"coordPartitionId,omitempty"`
	ReadOnly                 bool     `protobuf:"varint,7,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	HighPriority             bool     `protobuf:"varint,8,opt,name=highPriority,proto3" json:"highPriority,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{1}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *Transaction) GetReadKeyList() []string {
	if m != nil {
		return m.ReadKeyList
	}
	return nil
}

func (m *Transaction) GetWriteKeyList() []string {
	if m != nil {
		return m.WriteKeyList
	}
	return nil
}

func (m *Transaction) GetParticipatedPartitionIds() []int32 {
	if m != nil {
		return m.ParticipatedPartitionIds
	}
	return nil
}

func (m *Transaction) GetEstimateArrivalTimes() []int64 {
	if m != nil {
		return m.EstimateArrivalTimes
	}
	return nil
}

func (m *Transaction) GetCoordPartitionId() int32 {
	if m != nil {
		return m.CoordPartitionId
	}
	return 0
}

func (m *Transaction) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *Transaction) GetHighPriority() bool {
	if m != nil {
		return m.HighPriority
	}
	return false
}

type ReadAndPrepareRequest struct {
	Txn                  *Transaction `protobuf:"bytes,1,opt,name=txn,proto3" json:"txn,omitempty"`
	IsRead               bool         `protobuf:"varint,2,opt,name=isRead,proto3" json:"isRead,omitempty"`
	IsNotParticipant     bool         `protobuf:"varint,3,opt,name=isNotParticipant,proto3" json:"isNotParticipant,omitempty"`
	Timestamp            int64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientId             string       `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReadAndPrepareRequest) Reset()         { *m = ReadAndPrepareRequest{} }
func (m *ReadAndPrepareRequest) String() string { return proto.CompactTextString(m) }
func (*ReadAndPrepareRequest) ProtoMessage()    {}
func (*ReadAndPrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{2}
}

func (m *ReadAndPrepareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAndPrepareRequest.Unmarshal(m, b)
}
func (m *ReadAndPrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAndPrepareRequest.Marshal(b, m, deterministic)
}
func (m *ReadAndPrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAndPrepareRequest.Merge(m, src)
}
func (m *ReadAndPrepareRequest) XXX_Size() int {
	return xxx_messageInfo_ReadAndPrepareRequest.Size(m)
}
func (m *ReadAndPrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAndPrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAndPrepareRequest proto.InternalMessageInfo

func (m *ReadAndPrepareRequest) GetTxn() *Transaction {
	if m != nil {
		return m.Txn
	}
	return nil
}

func (m *ReadAndPrepareRequest) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *ReadAndPrepareRequest) GetIsNotParticipant() bool {
	if m != nil {
		return m.IsNotParticipant
	}
	return false
}

func (m *ReadAndPrepareRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReadAndPrepareRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type KeyValueVersion struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version              uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValueVersion) Reset()         { *m = KeyValueVersion{} }
func (m *KeyValueVersion) String() string { return proto.CompactTextString(m) }
func (*KeyValueVersion) ProtoMessage()    {}
func (*KeyValueVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{3}
}

func (m *KeyValueVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValueVersion.Unmarshal(m, b)
}
func (m *KeyValueVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValueVersion.Marshal(b, m, deterministic)
}
func (m *KeyValueVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValueVersion.Merge(m, src)
}
func (m *KeyValueVersion) XXX_Size() int {
	return xxx_messageInfo_KeyValueVersion.Size(m)
}
func (m *KeyValueVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValueVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValueVersion proto.InternalMessageInfo

func (m *KeyValueVersion) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValueVersion) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *KeyValueVersion) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type KeyVersion struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyVersion) Reset()         { *m = KeyVersion{} }
func (m *KeyVersion) String() string { return proto.CompactTextString(m) }
func (*KeyVersion) ProtoMessage()    {}
func (*KeyVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{4}
}

func (m *KeyVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyVersion.Unmarshal(m, b)
}
func (m *KeyVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyVersion.Marshal(b, m, deterministic)
}
func (m *KeyVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyVersion.Merge(m, src)
}
func (m *KeyVersion) XXX_Size() int {
	return xxx_messageInfo_KeyVersion.Size(m)
}
func (m *KeyVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KeyVersion proto.InternalMessageInfo

func (m *KeyVersion) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyVersion) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type KeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{5}
}

func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValue.Unmarshal(m, b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return xxx_messageInfo_KeyValue.Size(m)
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ReadAndPrepareReply struct {
	KeyValVerList        []*KeyValueVersion `protobuf:"bytes,1,rep,name=keyValVerList,proto3" json:"keyValVerList,omitempty"`
	LeaderId             int32              `protobuf:"varint,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	IsLeader             bool               `protobuf:"varint,3,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
	Status               int32              `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	TxnId                string             `protobuf:"bytes,5,opt,name=txnId,proto3" json:"txnId,omitempty"`
	OnTime               bool               `protobuf:"varint,6,opt,name=onTime,proto3" json:"onTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReadAndPrepareReply) Reset()         { *m = ReadAndPrepareReply{} }
func (m *ReadAndPrepareReply) String() string { return proto.CompactTextString(m) }
func (*ReadAndPrepareReply) ProtoMessage()    {}
func (*ReadAndPrepareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{6}
}

func (m *ReadAndPrepareReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAndPrepareReply.Unmarshal(m, b)
}
func (m *ReadAndPrepareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAndPrepareReply.Marshal(b, m, deterministic)
}
func (m *ReadAndPrepareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAndPrepareReply.Merge(m, src)
}
func (m *ReadAndPrepareReply) XXX_Size() int {
	return xxx_messageInfo_ReadAndPrepareReply.Size(m)
}
func (m *ReadAndPrepareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAndPrepareReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAndPrepareReply proto.InternalMessageInfo

func (m *ReadAndPrepareReply) GetKeyValVerList() []*KeyValueVersion {
	if m != nil {
		return m.KeyValVerList
	}
	return nil
}

func (m *ReadAndPrepareReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *ReadAndPrepareReply) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *ReadAndPrepareReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReadAndPrepareReply) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *ReadAndPrepareReply) GetOnTime() bool {
	if m != nil {
		return m.OnTime
	}
	return false
}

type ReadReplyFromCoordinator struct {
	KeyValVerList        []*KeyValueVersion `protobuf:"bytes,1,rep,name=keyValVerList,proto3" json:"keyValVerList,omitempty"`
	TxnId                string             `protobuf:"bytes,2,opt,name=txnId,proto3" json:"txnId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReadReplyFromCoordinator) Reset()         { *m = ReadReplyFromCoordinator{} }
func (m *ReadReplyFromCoordinator) String() string { return proto.CompactTextString(m) }
func (*ReadReplyFromCoordinator) ProtoMessage()    {}
func (*ReadReplyFromCoordinator) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{7}
}

func (m *ReadReplyFromCoordinator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadReplyFromCoordinator.Unmarshal(m, b)
}
func (m *ReadReplyFromCoordinator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadReplyFromCoordinator.Marshal(b, m, deterministic)
}
func (m *ReadReplyFromCoordinator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadReplyFromCoordinator.Merge(m, src)
}
func (m *ReadReplyFromCoordinator) XXX_Size() int {
	return xxx_messageInfo_ReadReplyFromCoordinator.Size(m)
}
func (m *ReadReplyFromCoordinator) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadReplyFromCoordinator.DiscardUnknown(m)
}

var xxx_messageInfo_ReadReplyFromCoordinator proto.InternalMessageInfo

func (m *ReadReplyFromCoordinator) GetKeyValVerList() []*KeyValueVersion {
	if m != nil {
		return m.KeyValVerList
	}
	return nil
}

func (m *ReadReplyFromCoordinator) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

type ForwardReadToCoordinator struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	TxnId                string   `protobuf:"bytes,2,opt,name=txnId,proto3" json:"txnId,omitempty"`
	CoorId               int32    `protobuf:"varint,3,opt,name=coorId,proto3" json:"coorId,omitempty"`
	ParentTxns           []string `protobuf:"bytes,4,rep,name=parentTxns,proto3" json:"parentTxns,omitempty"`
	Idx                  []int32  `protobuf:"varint,5,rep,packed,name=idx,proto3" json:"idx,omitempty"`
	KeyList              []string `protobuf:"bytes,6,rep,name=keyList,proto3" json:"keyList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardReadToCoordinator) Reset()         { *m = ForwardReadToCoordinator{} }
func (m *ForwardReadToCoordinator) String() string { return proto.CompactTextString(m) }
func (*ForwardReadToCoordinator) ProtoMessage()    {}
func (*ForwardReadToCoordinator) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{8}
}

func (m *ForwardReadToCoordinator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardReadToCoordinator.Unmarshal(m, b)
}
func (m *ForwardReadToCoordinator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardReadToCoordinator.Marshal(b, m, deterministic)
}
func (m *ForwardReadToCoordinator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardReadToCoordinator.Merge(m, src)
}
func (m *ForwardReadToCoordinator) XXX_Size() int {
	return xxx_messageInfo_ForwardReadToCoordinator.Size(m)
}
func (m *ForwardReadToCoordinator) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardReadToCoordinator.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardReadToCoordinator proto.InternalMessageInfo

func (m *ForwardReadToCoordinator) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ForwardReadToCoordinator) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *ForwardReadToCoordinator) GetCoorId() int32 {
	if m != nil {
		return m.CoorId
	}
	return 0
}

func (m *ForwardReadToCoordinator) GetParentTxns() []string {
	if m != nil {
		return m.ParentTxns
	}
	return nil
}

func (m *ForwardReadToCoordinator) GetIdx() []int32 {
	if m != nil {
		return m.Idx
	}
	return nil
}

func (m *ForwardReadToCoordinator) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

type ReadRequestToCoordinator struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRequestToCoordinator) Reset()         { *m = ReadRequestToCoordinator{} }
func (m *ReadRequestToCoordinator) String() string { return proto.CompactTextString(m) }
func (*ReadRequestToCoordinator) ProtoMessage()    {}
func (*ReadRequestToCoordinator) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{9}
}

func (m *ReadRequestToCoordinator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRequestToCoordinator.Unmarshal(m, b)
}
func (m *ReadRequestToCoordinator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRequestToCoordinator.Marshal(b, m, deterministic)
}
func (m *ReadRequestToCoordinator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequestToCoordinator.Merge(m, src)
}
func (m *ReadRequestToCoordinator) XXX_Size() int {
	return xxx_messageInfo_ReadRequestToCoordinator.Size(m)
}
func (m *ReadRequestToCoordinator) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequestToCoordinator.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequestToCoordinator proto.InternalMessageInfo

func (m *ReadRequestToCoordinator) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type PrepareResultRequest struct {
	TxnId                string        `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	ReadKeyVerList       []*KeyVersion `protobuf:"bytes,2,rep,name=readKeyVerList,proto3" json:"readKeyVerList,omitempty"`
	WriteKeyVerList      []*KeyVersion `protobuf:"bytes,3,rep,name=writeKeyVerList,proto3" json:"writeKeyVerList,omitempty"`
	PartitionId          int32         `protobuf:"varint,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	PrepareStatus        int32         `protobuf:"varint,5,opt,name=prepareStatus,proto3" json:"prepareStatus,omitempty"`
	Conditions           []string      `protobuf:"bytes,6,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Reorder              []string      `protobuf:"bytes,7,rep,name=reorder,proto3" json:"reorder,omitempty"`
	Forward              []string      `protobuf:"bytes,8,rep,name=forward,proto3" json:"forward,omitempty"`
	Counter              int32         `protobuf:"varint,9,opt,name=counter,proto3" json:"counter,omitempty"`
	EarlyAborts          []string      `protobuf:"bytes,10,rep,name=earlyAborts,proto3" json:"earlyAborts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PrepareResultRequest) Reset()         { *m = PrepareResultRequest{} }
func (m *PrepareResultRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareResultRequest) ProtoMessage()    {}
func (*PrepareResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{10}
}

func (m *PrepareResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareResultRequest.Unmarshal(m, b)
}
func (m *PrepareResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareResultRequest.Marshal(b, m, deterministic)
}
func (m *PrepareResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareResultRequest.Merge(m, src)
}
func (m *PrepareResultRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareResultRequest.Size(m)
}
func (m *PrepareResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareResultRequest proto.InternalMessageInfo

func (m *PrepareResultRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *PrepareResultRequest) GetReadKeyVerList() []*KeyVersion {
	if m != nil {
		return m.ReadKeyVerList
	}
	return nil
}

func (m *PrepareResultRequest) GetWriteKeyVerList() []*KeyVersion {
	if m != nil {
		return m.WriteKeyVerList
	}
	return nil
}

func (m *PrepareResultRequest) GetPartitionId() int32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *PrepareResultRequest) GetPrepareStatus() int32 {
	if m != nil {
		return m.PrepareStatus
	}
	return 0
}

func (m *PrepareResultRequest) GetConditions() []string {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *PrepareResultRequest) GetReorder() []string {
	if m != nil {
		return m.Reorder
	}
	return nil
}

func (m *PrepareResultRequest) GetForward() []string {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *PrepareResultRequest) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *PrepareResultRequest) GetEarlyAborts() []string {
	if m != nil {
		return m.EarlyAborts
	}
	return nil
}

type PrepareResultReply struct {
	LeaderId             int32    `protobuf:"varint,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareResultReply) Reset()         { *m = PrepareResultReply{} }
func (m *PrepareResultReply) String() string { return proto.CompactTextString(m) }
func (*PrepareResultReply) ProtoMessage()    {}
func (*PrepareResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{11}
}

func (m *PrepareResultReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareResultReply.Unmarshal(m, b)
}
func (m *PrepareResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareResultReply.Marshal(b, m, deterministic)
}
func (m *PrepareResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareResultReply.Merge(m, src)
}
func (m *PrepareResultReply) XXX_Size() int {
	return xxx_messageInfo_PrepareResultReply.Size(m)
}
func (m *PrepareResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareResultReply proto.InternalMessageInfo

func (m *PrepareResultReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type FastPrepareResultRequest struct {
	PrepareResult        *PrepareResultRequest `protobuf:"bytes,1,opt,name=prepareResult,proto3" json:"prepareResult,omitempty"`
	IsLeader             bool                  `protobuf:"varint,2,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
	RaftTerm             uint64                `protobuf:"varint,3,opt,name=raftTerm,proto3" json:"raftTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FastPrepareResultRequest) Reset()         { *m = FastPrepareResultRequest{} }
func (m *FastPrepareResultRequest) String() string { return proto.CompactTextString(m) }
func (*FastPrepareResultRequest) ProtoMessage()    {}
func (*FastPrepareResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{12}
}

func (m *FastPrepareResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FastPrepareResultRequest.Unmarshal(m, b)
}
func (m *FastPrepareResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FastPrepareResultRequest.Marshal(b, m, deterministic)
}
func (m *FastPrepareResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastPrepareResultRequest.Merge(m, src)
}
func (m *FastPrepareResultRequest) XXX_Size() int {
	return xxx_messageInfo_FastPrepareResultRequest.Size(m)
}
func (m *FastPrepareResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FastPrepareResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FastPrepareResultRequest proto.InternalMessageInfo

func (m *FastPrepareResultRequest) GetPrepareResult() *PrepareResultRequest {
	if m != nil {
		return m.PrepareResult
	}
	return nil
}

func (m *FastPrepareResultRequest) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *FastPrepareResultRequest) GetRaftTerm() uint64 {
	if m != nil {
		return m.RaftTerm
	}
	return 0
}

type FastPrepareResultReply struct {
	LeaderAddr           int32    `protobuf:"varint,1,opt,name=leaderAddr,proto3" json:"leaderAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FastPrepareResultReply) Reset()         { *m = FastPrepareResultReply{} }
func (m *FastPrepareResultReply) String() string { return proto.CompactTextString(m) }
func (*FastPrepareResultReply) ProtoMessage()    {}
func (*FastPrepareResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{13}
}

func (m *FastPrepareResultReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FastPrepareResultReply.Unmarshal(m, b)
}
func (m *FastPrepareResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FastPrepareResultReply.Marshal(b, m, deterministic)
}
func (m *FastPrepareResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastPrepareResultReply.Merge(m, src)
}
func (m *FastPrepareResultReply) XXX_Size() int {
	return xxx_messageInfo_FastPrepareResultReply.Size(m)
}
func (m *FastPrepareResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FastPrepareResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_FastPrepareResultReply proto.InternalMessageInfo

func (m *FastPrepareResultReply) GetLeaderAddr() int32 {
	if m != nil {
		return m.LeaderAddr
	}
	return 0
}

type RePrepareRequest struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	RequestTxnId         string   `protobuf:"bytes,2,opt,name=requestTxnId,proto3" json:"requestTxnId,omitempty"`
	Counter              int32    `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RePrepareRequest) Reset()         { *m = RePrepareRequest{} }
func (m *RePrepareRequest) String() string { return proto.CompactTextString(m) }
func (*RePrepareRequest) ProtoMessage()    {}
func (*RePrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{14}
}

func (m *RePrepareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RePrepareRequest.Unmarshal(m, b)
}
func (m *RePrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RePrepareRequest.Marshal(b, m, deterministic)
}
func (m *RePrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RePrepareRequest.Merge(m, src)
}
func (m *RePrepareRequest) XXX_Size() int {
	return xxx_messageInfo_RePrepareRequest.Size(m)
}
func (m *RePrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RePrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RePrepareRequest proto.InternalMessageInfo

func (m *RePrepareRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *RePrepareRequest) GetRequestTxnId() string {
	if m != nil {
		return m.RequestTxnId
	}
	return ""
}

func (m *RePrepareRequest) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type RePrepareReply struct {
	LeaderId             int32    `protobuf:"varint,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RePrepareReply) Reset()         { *m = RePrepareReply{} }
func (m *RePrepareReply) String() string { return proto.CompactTextString(m) }
func (*RePrepareReply) ProtoMessage()    {}
func (*RePrepareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{15}
}

func (m *RePrepareReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RePrepareReply.Unmarshal(m, b)
}
func (m *RePrepareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RePrepareReply.Marshal(b, m, deterministic)
}
func (m *RePrepareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RePrepareReply.Merge(m, src)
}
func (m *RePrepareReply) XXX_Size() int {
	return xxx_messageInfo_RePrepareReply.Size(m)
}
func (m *RePrepareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RePrepareReply.DiscardUnknown(m)
}

var xxx_messageInfo_RePrepareReply proto.InternalMessageInfo

func (m *RePrepareReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type ReverseReorderRequest struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	ReorderedTxnId       string   `protobuf:"bytes,2,opt,name=reorderedTxnId,proto3" json:"reorderedTxnId,omitempty"`
	PartitionId          int32    `protobuf:"varint,3,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	CoordPartitionId     int32    `protobuf:"varint,4,opt,name=coordPartitionId,proto3" json:"coordPartitionId,omitempty"`
	Counter              int32    `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseReorderRequest) Reset()         { *m = ReverseReorderRequest{} }
func (m *ReverseReorderRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseReorderRequest) ProtoMessage()    {}
func (*ReverseReorderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{16}
}

func (m *ReverseReorderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseReorderRequest.Unmarshal(m, b)
}
func (m *ReverseReorderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseReorderRequest.Marshal(b, m, deterministic)
}
func (m *ReverseReorderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseReorderRequest.Merge(m, src)
}
func (m *ReverseReorderRequest) XXX_Size() int {
	return xxx_messageInfo_ReverseReorderRequest.Size(m)
}
func (m *ReverseReorderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseReorderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseReorderRequest proto.InternalMessageInfo

func (m *ReverseReorderRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *ReverseReorderRequest) GetReorderedTxnId() string {
	if m != nil {
		return m.ReorderedTxnId
	}
	return ""
}

func (m *ReverseReorderRequest) GetPartitionId() int32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *ReverseReorderRequest) GetCoordPartitionId() int32 {
	if m != nil {
		return m.CoordPartitionId
	}
	return 0
}

func (m *ReverseReorderRequest) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type ReverseReorderReply struct {
	LeaderId             int32    `protobuf:"varint,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseReorderReply) Reset()         { *m = ReverseReorderReply{} }
func (m *ReverseReorderReply) String() string { return proto.CompactTextString(m) }
func (*ReverseReorderReply) ProtoMessage()    {}
func (*ReverseReorderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{17}
}

func (m *ReverseReorderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseReorderReply.Unmarshal(m, b)
}
func (m *ReverseReorderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseReorderReply.Marshal(b, m, deterministic)
}
func (m *ReverseReorderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseReorderReply.Merge(m, src)
}
func (m *ReverseReorderReply) XXX_Size() int {
	return xxx_messageInfo_ReverseReorderReply.Size(m)
}
func (m *ReverseReorderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseReorderReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseReorderReply proto.InternalMessageInfo

func (m *ReverseReorderReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type ReverseAgreementRequest struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	ReorderedTxnId       string   `protobuf:"bytes,2,opt,name=reorderedTxnId,proto3" json:"reorderedTxnId,omitempty"`
	AgreeReorder         bool     `protobuf:"varint,3,opt,name=agreeReorder,proto3" json:"agreeReorder,omitempty"`
	PartitionId          int32    `protobuf:"varint,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Counter              int32    `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseAgreementRequest) Reset()         { *m = ReverseAgreementRequest{} }
func (m *ReverseAgreementRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseAgreementRequest) ProtoMessage()    {}
func (*ReverseAgreementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{18}
}

func (m *ReverseAgreementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseAgreementRequest.Unmarshal(m, b)
}
func (m *ReverseAgreementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseAgreementRequest.Marshal(b, m, deterministic)
}
func (m *ReverseAgreementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseAgreementRequest.Merge(m, src)
}
func (m *ReverseAgreementRequest) XXX_Size() int {
	return xxx_messageInfo_ReverseAgreementRequest.Size(m)
}
func (m *ReverseAgreementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseAgreementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseAgreementRequest proto.InternalMessageInfo

func (m *ReverseAgreementRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *ReverseAgreementRequest) GetReorderedTxnId() string {
	if m != nil {
		return m.ReorderedTxnId
	}
	return ""
}

func (m *ReverseAgreementRequest) GetAgreeReorder() bool {
	if m != nil {
		return m.AgreeReorder
	}
	return false
}

func (m *ReverseAgreementRequest) GetPartitionId() int32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *ReverseAgreementRequest) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type ReverseAgreementReply struct {
	LeaderId             int32    `protobuf:"varint,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseAgreementReply) Reset()         { *m = ReverseAgreementReply{} }
func (m *ReverseAgreementReply) String() string { return proto.CompactTextString(m) }
func (*ReverseAgreementReply) ProtoMessage()    {}
func (*ReverseAgreementReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{19}
}

func (m *ReverseAgreementReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseAgreementReply.Unmarshal(m, b)
}
func (m *ReverseAgreementReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseAgreementReply.Marshal(b, m, deterministic)
}
func (m *ReverseAgreementReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseAgreementReply.Merge(m, src)
}
func (m *ReverseAgreementReply) XXX_Size() int {
	return xxx_messageInfo_ReverseAgreementReply.Size(m)
}
func (m *ReverseAgreementReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseAgreementReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseAgreementReply proto.InternalMessageInfo

func (m *ReverseAgreementReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type CommitRequest struct {
	TxnId                string        `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	WriteKeyValList      []*KeyValue   `protobuf:"bytes,2,rep,name=writeKeyValList,proto3" json:"writeKeyValList,omitempty"`
	ResultFromLeader     []bool        `protobuf:"varint,3,rep,packed,name=resultFromLeader,proto3" json:"resultFromLeader,omitempty"`
	FromCoordinator      bool          `protobuf:"varint,4,opt,name=fromCoordinator,proto3" json:"fromCoordinator,omitempty"`
	ReadKeyVerList       []*KeyVersion `protobuf:"bytes,5,rep,name=readKeyVerList,proto3" json:"readKeyVerList,omitempty"`
	IsReadAnyReplica     bool          `protobuf:"varint,6,opt,name=isReadAnyReplica,proto3" json:"isReadAnyReplica,omitempty"`
	IsFastPathSuccess    bool          `protobuf:"varint,7,opt,name=isFastPathSuccess,proto3" json:"isFastPathSuccess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{20}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *CommitRequest) GetWriteKeyValList() []*KeyValue {
	if m != nil {
		return m.WriteKeyValList
	}
	return nil
}

func (m *CommitRequest) GetResultFromLeader() []bool {
	if m != nil {
		return m.ResultFromLeader
	}
	return nil
}

func (m *CommitRequest) GetFromCoordinator() bool {
	if m != nil {
		return m.FromCoordinator
	}
	return false
}

func (m *CommitRequest) GetReadKeyVerList() []*KeyVersion {
	if m != nil {
		return m.ReadKeyVerList
	}
	return nil
}

func (m *CommitRequest) GetIsReadAnyReplica() bool {
	if m != nil {
		return m.IsReadAnyReplica
	}
	return false
}

func (m *CommitRequest) GetIsFastPathSuccess() bool {
	if m != nil {
		return m.IsFastPathSuccess
	}
	return false
}

type CommitReply struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	LeaderId             int32    `protobuf:"varint,2,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitReply) Reset()         { *m = CommitReply{} }
func (m *CommitReply) String() string { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()    {}
func (*CommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{21}
}

func (m *CommitReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitReply.Unmarshal(m, b)
}
func (m *CommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitReply.Marshal(b, m, deterministic)
}
func (m *CommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitReply.Merge(m, src)
}
func (m *CommitReply) XXX_Size() int {
	return xxx_messageInfo_CommitReply.Size(m)
}
func (m *CommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommitReply proto.InternalMessageInfo

func (m *CommitReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *CommitReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type AbortRequest struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	FromCoordinator      bool     `protobuf:"varint,2,opt,name=fromCoordinator,proto3" json:"fromCoordinator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortRequest) Reset()         { *m = AbortRequest{} }
func (m *AbortRequest) String() string { return proto.CompactTextString(m) }
func (*AbortRequest) ProtoMessage()    {}
func (*AbortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{22}
}

func (m *AbortRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortRequest.Unmarshal(m, b)
}
func (m *AbortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortRequest.Marshal(b, m, deterministic)
}
func (m *AbortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortRequest.Merge(m, src)
}
func (m *AbortRequest) XXX_Size() int {
	return xxx_messageInfo_AbortRequest.Size(m)
}
func (m *AbortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortRequest proto.InternalMessageInfo

func (m *AbortRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *AbortRequest) GetFromCoordinator() bool {
	if m != nil {
		return m.FromCoordinator
	}
	return false
}

type AbortReply struct {
	LeaderId             int32    `protobuf:"varint,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortReply) Reset()         { *m = AbortReply{} }
func (m *AbortReply) String() string { return proto.CompactTextString(m) }
func (*AbortReply) ProtoMessage()    {}
func (*AbortReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{23}
}

func (m *AbortReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortReply.Unmarshal(m, b)
}
func (m *AbortReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortReply.Marshal(b, m, deterministic)
}
func (m *AbortReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortReply.Merge(m, src)
}
func (m *AbortReply) XXX_Size() int {
	return xxx_messageInfo_AbortReply.Size(m)
}
func (m *AbortReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortReply.DiscardUnknown(m)
}

var xxx_messageInfo_AbortReply proto.InternalMessageInfo

func (m *AbortReply) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

type PrintStatusRequest struct {
	CommittedTxn         int32    `protobuf:"varint,1,opt,name=committedTxn,proto3" json:"committedTxn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintStatusRequest) Reset()         { *m = PrintStatusRequest{} }
func (m *PrintStatusRequest) String() string { return proto.CompactTextString(m) }
func (*PrintStatusRequest) ProtoMessage()    {}
func (*PrintStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{24}
}

func (m *PrintStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrintStatusRequest.Unmarshal(m, b)
}
func (m *PrintStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrintStatusRequest.Marshal(b, m, deterministic)
}
func (m *PrintStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintStatusRequest.Merge(m, src)
}
func (m *PrintStatusRequest) XXX_Size() int {
	return xxx_messageInfo_PrintStatusRequest.Size(m)
}
func (m *PrintStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrintStatusRequest proto.InternalMessageInfo

func (m *PrintStatusRequest) GetCommittedTxn() int32 {
	if m != nil {
		return m.CommittedTxn
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{25}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type ProbeReq struct {
	FromCoordinator      bool     `protobuf:"varint,1,opt,name=fromCoordinator,proto3" json:"fromCoordinator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeReq) Reset()         { *m = ProbeReq{} }
func (m *ProbeReq) String() string { return proto.CompactTextString(m) }
func (*ProbeReq) ProtoMessage()    {}
func (*ProbeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{26}
}

func (m *ProbeReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeReq.Unmarshal(m, b)
}
func (m *ProbeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeReq.Marshal(b, m, deterministic)
}
func (m *ProbeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeReq.Merge(m, src)
}
func (m *ProbeReq) XXX_Size() int {
	return xxx_messageInfo_ProbeReq.Size(m)
}
func (m *ProbeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeReq proto.InternalMessageInfo

func (m *ProbeReq) GetFromCoordinator() bool {
	if m != nil {
		return m.FromCoordinator
	}
	return false
}

type ProbeReply struct {
	QueuingDelay         int64    `protobuf:"varint,1,opt,name=queuingDelay,proto3" json:"queuingDelay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeReply) Reset()         { *m = ProbeReply{} }
func (m *ProbeReply) String() string { return proto.CompactTextString(m) }
func (*ProbeReply) ProtoMessage()    {}
func (*ProbeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{27}
}

func (m *ProbeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeReply.Unmarshal(m, b)
}
func (m *ProbeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeReply.Marshal(b, m, deterministic)
}
func (m *ProbeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeReply.Merge(m, src)
}
func (m *ProbeReply) XXX_Size() int {
	return xxx_messageInfo_ProbeReply.Size(m)
}
func (m *ProbeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeReply proto.InternalMessageInfo

func (m *ProbeReply) GetQueuingDelay() int64 {
	if m != nil {
		return m.QueuingDelay
	}
	return 0
}

type ProbeTimeReply struct {
	ProcessTime          int64    `protobuf:"varint,1,opt,name=processTime,proto3" json:"processTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeTimeReply) Reset()         { *m = ProbeTimeReply{} }
func (m *ProbeTimeReply) String() string { return proto.CompactTextString(m) }
func (*ProbeTimeReply) ProtoMessage()    {}
func (*ProbeTimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{28}
}

func (m *ProbeTimeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeTimeReply.Unmarshal(m, b)
}
func (m *ProbeTimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeTimeReply.Marshal(b, m, deterministic)
}
func (m *ProbeTimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeTimeReply.Merge(m, src)
}
func (m *ProbeTimeReply) XXX_Size() int {
	return xxx_messageInfo_ProbeTimeReply.Size(m)
}
func (m *ProbeTimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeTimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeTimeReply proto.InternalMessageInfo

func (m *ProbeTimeReply) GetProcessTime() int64 {
	if m != nil {
		return m.ProcessTime
	}
	return 0
}

type WriteDataRequest struct {
	TxnId                string      `protobuf:"bytes,1,opt,name=txnId,proto3" json:"txnId,omitempty"`
	WriteKeyValList      []*KeyValue `protobuf:"bytes,2,rep,name=writeKeyValList,proto3" json:"writeKeyValList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WriteDataRequest) Reset()         { *m = WriteDataRequest{} }
func (m *WriteDataRequest) String() string { return proto.CompactTextString(m) }
func (*WriteDataRequest) ProtoMessage()    {}
func (*WriteDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd83e540b198e190, []int{29}
}

func (m *WriteDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteDataRequest.Unmarshal(m, b)
}
func (m *WriteDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteDataRequest.Marshal(b, m, deterministic)
}
func (m *WriteDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteDataRequest.Merge(m, src)
}
func (m *WriteDataRequest) XXX_Size() int {
	return xxx_messageInfo_WriteDataRequest.Size(m)
}
func (m *WriteDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteDataRequest proto.InternalMessageInfo

func (m *WriteDataRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *WriteDataRequest) GetWriteKeyValList() []*KeyValue {
	if m != nil {
		return m.WriteKeyValList
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitResult)(nil), "rpc.CommitResult")
	proto.RegisterType((*Transaction)(nil), "rpc.Transaction")
	proto.RegisterType((*ReadAndPrepareRequest)(nil), "rpc.ReadAndPrepareRequest")
	proto.RegisterType((*KeyValueVersion)(nil), "rpc.KeyValueVersion")
	proto.RegisterType((*KeyVersion)(nil), "rpc.KeyVersion")
	proto.RegisterType((*KeyValue)(nil), "rpc.KeyValue")
	proto.RegisterType((*ReadAndPrepareReply)(nil), "rpc.ReadAndPrepareReply")
	proto.RegisterType((*ReadReplyFromCoordinator)(nil), "rpc.ReadReplyFromCoordinator")
	proto.RegisterType((*ForwardReadToCoordinator)(nil), "rpc.ForwardReadToCoordinator")
	proto.RegisterType((*ReadRequestToCoordinator)(nil), "rpc.ReadRequestToCoordinator")
	proto.RegisterType((*PrepareResultRequest)(nil), "rpc.PrepareResultRequest")
	proto.RegisterType((*PrepareResultReply)(nil), "rpc.PrepareResultReply")
	proto.RegisterType((*FastPrepareResultRequest)(nil), "rpc.FastPrepareResultRequest")
	proto.RegisterType((*FastPrepareResultReply)(nil), "rpc.FastPrepareResultReply")
	proto.RegisterType((*RePrepareRequest)(nil), "rpc.RePrepareRequest")
	proto.RegisterType((*RePrepareReply)(nil), "rpc.RePrepareReply")
	proto.RegisterType((*ReverseReorderRequest)(nil), "rpc.ReverseReorderRequest")
	proto.RegisterType((*ReverseReorderReply)(nil), "rpc.ReverseReorderReply")
	proto.RegisterType((*ReverseAgreementRequest)(nil), "rpc.ReverseAgreementRequest")
	proto.RegisterType((*ReverseAgreementReply)(nil), "rpc.ReverseAgreementReply")
	proto.RegisterType((*CommitRequest)(nil), "rpc.CommitRequest")
	proto.RegisterType((*CommitReply)(nil), "rpc.CommitReply")
	proto.RegisterType((*AbortRequest)(nil), "rpc.AbortRequest")
	proto.RegisterType((*AbortReply)(nil), "rpc.AbortReply")
	proto.RegisterType((*PrintStatusRequest)(nil), "rpc.PrintStatusRequest")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
	proto.RegisterType((*ProbeReq)(nil), "rpc.ProbeReq")
	proto.RegisterType((*ProbeReply)(nil), "rpc.ProbeReply")
	proto.RegisterType((*ProbeTimeReply)(nil), "rpc.ProbeTimeReply")
	proto.RegisterType((*WriteDataRequest)(nil), "rpc.WriteDataRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarouselClient is the client API for Carousel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarouselClient interface {
	ReadAndPrepare(ctx context.Context, in *ReadAndPrepareRequest, opts ...grpc.CallOption) (*ReadAndPrepareReply, error)
	ReadOnly(ctx context.Context, in *ReadAndPrepareRequest, opts ...grpc.CallOption) (*ReadAndPrepareReply, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortReply, error)
	// RPCs for transaction participants sending prepare result to transaction coordinators
	PrepareResult(ctx context.Context, in *PrepareResultRequest, opts ...grpc.CallOption) (*PrepareResultReply, error)
	FastPrepareResult(ctx context.Context, in *FastPrepareResultRequest, opts ...grpc.CallOption) (*FastPrepareResultReply, error)
	// leader send this message to coordinator requiring reverse the reorder
	ReverseReorder(ctx context.Context, in *ReverseReorderRequest, opts ...grpc.CallOption) (*ReverseReorderReply, error)
	// coordinator send this message to coordinator indicating if reverse success
	ReverseReorderAgreement(ctx context.Context, in *ReverseAgreementRequest, opts ...grpc.CallOption) (*ReverseAgreementReply, error)
	// coordinator to leader to re-prepare
	RePrepare(ctx context.Context, in *RePrepareRequest, opts ...grpc.CallOption) (*RePrepareReply, error)
	// print final result
	PrintStatus(ctx context.Context, in *PrintStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrepareResultReply, error)
	// // Network Latency Monitoring
	// For clients
	Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error)
	ProbeTime(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeTimeReply, error)
	// stream rpc sending the read result from coordinator to client
	// client sends to coordinator
	ReadResultFromCoordinator(ctx context.Context, in *ReadRequestToCoordinator, opts ...grpc.CallOption) (Carousel_ReadResultFromCoordinatorClient, error)
	// client sends write data to coordinator
	WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*Empty, error)
	// data server sends to coordinator
	ForwardReadRequestToCoordinator(ctx context.Context, in *ForwardReadToCoordinator, opts ...grpc.CallOption) (*Empty, error)
	CommitResultToCoordinator(ctx context.Context, in *CommitResult, opts ...grpc.CallOption) (*Empty, error)
}

type carouselClient struct {
	cc *grpc.ClientConn
}

func NewCarouselClient(cc *grpc.ClientConn) CarouselClient {
	return &carouselClient{cc}
}

func (c *carouselClient) ReadAndPrepare(ctx context.Context, in *ReadAndPrepareRequest, opts ...grpc.CallOption) (*ReadAndPrepareReply, error) {
	out := new(ReadAndPrepareReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ReadAndPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ReadOnly(ctx context.Context, in *ReadAndPrepareRequest, opts ...grpc.CallOption) (*ReadAndPrepareReply, error) {
	out := new(ReadAndPrepareReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*AbortReply, error) {
	out := new(AbortReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) PrepareResult(ctx context.Context, in *PrepareResultRequest, opts ...grpc.CallOption) (*PrepareResultReply, error) {
	out := new(PrepareResultReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/PrepareResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) FastPrepareResult(ctx context.Context, in *FastPrepareResultRequest, opts ...grpc.CallOption) (*FastPrepareResultReply, error) {
	out := new(FastPrepareResultReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/FastPrepareResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ReverseReorder(ctx context.Context, in *ReverseReorderRequest, opts ...grpc.CallOption) (*ReverseReorderReply, error) {
	out := new(ReverseReorderReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ReverseReorder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ReverseReorderAgreement(ctx context.Context, in *ReverseAgreementRequest, opts ...grpc.CallOption) (*ReverseAgreementReply, error) {
	out := new(ReverseAgreementReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ReverseReorderAgreement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) RePrepare(ctx context.Context, in *RePrepareRequest, opts ...grpc.CallOption) (*RePrepareReply, error) {
	out := new(RePrepareReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/RePrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) PrintStatus(ctx context.Context, in *PrintStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/PrintStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PrepareResultReply, error) {
	out := new(PrepareResultReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error) {
	out := new(ProbeReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ProbeTime(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeTimeReply, error) {
	out := new(ProbeTimeReply)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ProbeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ReadResultFromCoordinator(ctx context.Context, in *ReadRequestToCoordinator, opts ...grpc.CallOption) (Carousel_ReadResultFromCoordinatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Carousel_serviceDesc.Streams[0], "/rpc.Carousel/ReadResultFromCoordinator", opts...)
	if err != nil {
		return nil, err
	}
	x := &carouselReadResultFromCoordinatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Carousel_ReadResultFromCoordinatorClient interface {
	Recv() (*ReadReplyFromCoordinator, error)
	grpc.ClientStream
}

type carouselReadResultFromCoordinatorClient struct {
	grpc.ClientStream
}

func (x *carouselReadResultFromCoordinatorClient) Recv() (*ReadReplyFromCoordinator, error) {
	m := new(ReadReplyFromCoordinator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *carouselClient) WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/WriteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) ForwardReadRequestToCoordinator(ctx context.Context, in *ForwardReadToCoordinator, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/ForwardReadRequestToCoordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carouselClient) CommitResultToCoordinator(ctx context.Context, in *CommitResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Carousel/CommitResultToCoordinator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarouselServer is the server API for Carousel service.
type CarouselServer interface {
	ReadAndPrepare(context.Context, *ReadAndPrepareRequest) (*ReadAndPrepareReply, error)
	ReadOnly(context.Context, *ReadAndPrepareRequest) (*ReadAndPrepareReply, error)
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
	Abort(context.Context, *AbortRequest) (*AbortReply, error)
	// RPCs for transaction participants sending prepare result to transaction coordinators
	PrepareResult(context.Context, *PrepareResultRequest) (*PrepareResultReply, error)
	FastPrepareResult(context.Context, *FastPrepareResultRequest) (*FastPrepareResultReply, error)
	// leader send this message to coordinator requiring reverse the reorder
	ReverseReorder(context.Context, *ReverseReorderRequest) (*ReverseReorderReply, error)
	// coordinator send this message to coordinator indicating if reverse success
	ReverseReorderAgreement(context.Context, *ReverseAgreementRequest) (*ReverseAgreementReply, error)
	// coordinator to leader to re-prepare
	RePrepare(context.Context, *RePrepareRequest) (*RePrepareReply, error)
	// print final result
	PrintStatus(context.Context, *PrintStatusRequest) (*Empty, error)
	HeartBeat(context.Context, *Empty) (*PrepareResultReply, error)
	// // Network Latency Monitoring
	// For clients
	Probe(context.Context, *ProbeReq) (*ProbeReply, error)
	ProbeTime(context.Context, *ProbeReq) (*ProbeTimeReply, error)
	// stream rpc sending the read result from coordinator to client
	// client sends to coordinator
	ReadResultFromCoordinator(*ReadRequestToCoordinator, Carousel_ReadResultFromCoordinatorServer) error
	// client sends write data to coordinator
	WriteData(context.Context, *WriteDataRequest) (*Empty, error)
	// data server sends to coordinator
	ForwardReadRequestToCoordinator(context.Context, *ForwardReadToCoordinator) (*Empty, error)
	CommitResultToCoordinator(context.Context, *CommitResult) (*Empty, error)
}

func RegisterCarouselServer(s *grpc.Server, srv CarouselServer) {
	s.RegisterService(&_Carousel_serviceDesc, srv)
}

func _Carousel_ReadAndPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAndPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ReadAndPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ReadAndPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ReadAndPrepare(ctx, req.(*ReadAndPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAndPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ReadOnly(ctx, req.(*ReadAndPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_PrepareResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).PrepareResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/PrepareResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).PrepareResult(ctx, req.(*PrepareResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_FastPrepareResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastPrepareResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).FastPrepareResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/FastPrepareResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).FastPrepareResult(ctx, req.(*FastPrepareResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ReverseReorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseReorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ReverseReorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ReverseReorder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ReverseReorder(ctx, req.(*ReverseReorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ReverseReorderAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ReverseReorderAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ReverseReorderAgreement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ReverseReorderAgreement(ctx, req.(*ReverseAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_RePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RePrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).RePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/RePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).RePrepare(ctx, req.(*RePrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_PrintStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).PrintStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/PrintStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).PrintStatus(ctx, req.(*PrintStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).HeartBeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).Probe(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ProbeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ProbeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ProbeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ProbeTime(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ReadResultFromCoordinator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequestToCoordinator)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CarouselServer).ReadResultFromCoordinator(m, &carouselReadResultFromCoordinatorServer{stream})
}

type Carousel_ReadResultFromCoordinatorServer interface {
	Send(*ReadReplyFromCoordinator) error
	grpc.ServerStream
}

type carouselReadResultFromCoordinatorServer struct {
	grpc.ServerStream
}

func (x *carouselReadResultFromCoordinatorServer) Send(m *ReadReplyFromCoordinator) error {
	return x.ServerStream.SendMsg(m)
}

func _Carousel_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/WriteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).WriteData(ctx, req.(*WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_ForwardReadRequestToCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardReadToCoordinator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).ForwardReadRequestToCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/ForwardReadRequestToCoordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).ForwardReadRequestToCoordinator(ctx, req.(*ForwardReadToCoordinator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Carousel_CommitResultToCoordinator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarouselServer).CommitResultToCoordinator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Carousel/CommitResultToCoordinator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarouselServer).CommitResultToCoordinator(ctx, req.(*CommitResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _Carousel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Carousel",
	HandlerType: (*CarouselServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAndPrepare",
			Handler:    _Carousel_ReadAndPrepare_Handler,
		},
		{
			MethodName: "ReadOnly",
			Handler:    _Carousel_ReadOnly_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Carousel_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _Carousel_Abort_Handler,
		},
		{
			MethodName: "PrepareResult",
			Handler:    _Carousel_PrepareResult_Handler,
		},
		{
			MethodName: "FastPrepareResult",
			Handler:    _Carousel_FastPrepareResult_Handler,
		},
		{
			MethodName: "ReverseReorder",
			Handler:    _Carousel_ReverseReorder_Handler,
		},
		{
			MethodName: "ReverseReorderAgreement",
			Handler:    _Carousel_ReverseReorderAgreement_Handler,
		},
		{
			MethodName: "RePrepare",
			Handler:    _Carousel_RePrepare_Handler,
		},
		{
			MethodName: "PrintStatus",
			Handler:    _Carousel_PrintStatus_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Carousel_HeartBeat_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Carousel_Probe_Handler,
		},
		{
			MethodName: "ProbeTime",
			Handler:    _Carousel_ProbeTime_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _Carousel_WriteData_Handler,
		},
		{
			MethodName: "ForwardReadRequestToCoordinator",
			Handler:    _Carousel_ForwardReadRequestToCoordinator_Handler,
		},
		{
			MethodName: "CommitResultToCoordinator",
			Handler:    _Carousel_CommitResultToCoordinator_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadResultFromCoordinator",
			Handler:       _Carousel_ReadResultFromCoordinator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "carousel.proto",
}

func init() { proto.RegisterFile("carousel.proto", fileDescriptor_cd83e540b198e190) }

var fileDescriptor_cd83e540b198e190 = []byte{
	// 1439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0xd4, 0x46,
	0x14, 0x8f, 0xd7, 0x71, 0xb2, 0xfb, 0xf2, 0x3d, 0x04, 0x30, 0x5b, 0xa0, 0xab, 0x51, 0x55, 0x6d,
	0x2b, 0x8a, 0x42, 0x40, 0x2d, 0x20, 0xa4, 0x2a, 0x7c, 0x89, 0x08, 0x44, 0xd3, 0x21, 0xa5, 0xa7,
	0x1e, 0x86, 0xf5, 0x04, 0x2c, 0x76, 0x6d, 0x33, 0x9e, 0x85, 0xec, 0xdf, 0xd1, 0x7f, 0xa4, 0xb7,
	0xaa, 0x87, 0x1e, 0xab, 0x1e, 0x7b, 0xeb, 0xdf, 0xd2, 0x63, 0xf5, 0x66, 0xc6, 0xde, 0xb1, 0xd7,
	0x9b, 0x44, 0xfd, 0xb8, 0xe5, 0x7d, 0xcd, 0xbe, 0xf7, 0x7b, 0x9f, 0x0e, 0xac, 0x0f, 0xb8, 0x4c,
	0xc7, 0xb9, 0x18, 0x5e, 0xcf, 0x64, 0xaa, 0x52, 0xe2, 0xcb, 0x6c, 0x40, 0xef, 0xc1, 0xea, 0x83,
	0x74, 0x34, 0x8a, 0x15, 0x13, 0xf9, 0x78, 0xa8, 0xc8, 0x36, 0x04, 0xea, 0x38, 0xd9, 0x8f, 0x42,
	0xaf, 0xe7, 0xf5, 0x3b, 0xcc, 0x10, 0xe4, 0x02, 0x2c, 0x49, 0x2d, 0x0f, 0x5b, 0x3d, 0xaf, 0xdf,
	0x66, 0x96, 0xa2, 0xbf, 0xb5, 0x60, 0xe5, 0x50, 0xf2, 0x24, 0xe7, 0x03, 0x15, 0xa7, 0xc9, 0x1c,
	0xeb, 0x1e, 0xac, 0x48, 0xc1, 0xa3, 0xa7, 0x62, 0xf2, 0x2c, 0xce, 0xf1, 0x09, 0xbf, 0xdf, 0x61,
	0x2e, 0x8b, 0x50, 0x58, 0xfd, 0x20, 0x63, 0x25, 0x0a, 0x15, 0x5f, 0xab, 0x54, 0x78, 0xe4, 0x2e,
	0x84, 0x19, 0x97, 0x2a, 0x1e, 0xc4, 0x19, 0x57, 0x22, 0x3a, 0xc0, 0xbf, 0xf1, 0x47, 0xf7, 0xa3,
	0x3c, 0x5c, 0xec, 0xf9, 0xfd, 0x80, 0xcd, 0x95, 0x93, 0x5d, 0xd8, 0x16, 0xb9, 0x8a, 0x47, 0x5c,
	0x89, 0x3d, 0x29, 0xe3, 0xf7, 0x7c, 0x78, 0x18, 0x8f, 0x44, 0x1e, 0x06, 0x3d, 0xbf, 0xef, 0xb3,
	0x46, 0x19, 0xf9, 0x1c, 0x36, 0x07, 0x69, 0x2a, 0xdd, 0x87, 0xc2, 0xa5, 0x9e, 0xd7, 0x0f, 0xd8,
	0x0c, 0x9f, 0x74, 0xa1, 0x8d, 0xe1, 0x7c, 0x93, 0x0c, 0x27, 0xe1, 0xb2, 0x46, 0xa8, 0xa4, 0x31,
	0xb6, 0x37, 0xf1, 0xeb, 0x37, 0x07, 0x32, 0x4e, 0x65, 0xac, 0x26, 0x61, 0x5b, 0xcb, 0x2b, 0x3c,
	0xfa, 0x8b, 0x07, 0xe7, 0x99, 0xe0, 0xd1, 0x5e, 0x12, 0x1d, 0x48, 0x91, 0x71, 0x29, 0x98, 0x78,
	0x37, 0x16, 0x1a, 0x19, 0x5f, 0x1d, 0x27, 0x1a, 0xcf, 0x95, 0xdd, 0xcd, 0xeb, 0x32, 0x1b, 0x5c,
	0x77, 0x00, 0x67, 0x28, 0xc4, 0xec, 0xc4, 0x39, 0x9a, 0x17, 0xd9, 0x31, 0x14, 0x46, 0x10, 0xe7,
	0xcf, 0x53, 0x75, 0x50, 0xc0, 0x92, 0x20, 0xb2, 0xa8, 0x31, 0xc3, 0x27, 0x97, 0xa1, 0xa3, 0x30,
	0x6c, 0xc5, 0x47, 0x59, 0xb8, 0xd8, 0xf3, 0xfa, 0x3e, 0x9b, 0x32, 0x30, 0xbe, 0xc1, 0x30, 0x16,
	0x89, 0xda, 0x8f, 0xc2, 0x40, 0xa7, 0xb6, 0xa4, 0xe9, 0x0b, 0xd8, 0x78, 0x2a, 0x26, 0x2f, 0xf9,
	0x70, 0x2c, 0x5e, 0x0a, 0x99, 0x63, 0x19, 0x6c, 0x82, 0xff, 0x56, 0x4c, 0x6c, 0x11, 0xe0, 0x9f,
	0x58, 0x18, 0xef, 0x51, 0x43, 0x7b, 0xd8, 0x61, 0x86, 0x20, 0x21, 0x2c, 0xbf, 0x37, 0x26, 0xda,
	0xaf, 0x45, 0x56, 0x90, 0xf4, 0x36, 0x00, 0x3e, 0x3a, 0xf7, 0x3d, 0xc7, 0xb2, 0x55, 0xb5, 0xdc,
	0x85, 0x76, 0xe1, 0xce, 0x59, 0xfd, 0xa0, 0x7f, 0x78, 0x70, 0xae, 0x0e, 0x7f, 0x36, 0x9c, 0x90,
	0xbb, 0xb0, 0xf6, 0x56, 0xbf, 0xf5, 0x52, 0x48, 0x5d, 0x97, 0x5e, 0xcf, 0xef, 0xaf, 0xec, 0x6e,
	0xeb, 0x34, 0xd4, 0x82, 0x66, 0x55, 0x55, 0x84, 0x6c, 0x28, 0x78, 0x24, 0xe4, 0xbe, 0x49, 0x4b,
	0xc0, 0x4a, 0x1a, 0x65, 0x71, 0xfe, 0x4c, 0x53, 0x36, 0x21, 0x25, 0x8d, 0xc9, 0xcc, 0x15, 0x57,
	0xe3, 0x5c, 0x67, 0x21, 0x60, 0x96, 0x9a, 0xb6, 0x56, 0x50, 0x6b, 0xcc, 0x34, 0xc1, 0x7a, 0xd5,
	0xa5, 0xd9, 0x66, 0x96, 0xa2, 0x43, 0x08, 0x31, 0x20, 0x1d, 0xc6, 0x63, 0x99, 0x8e, 0x1e, 0x60,
	0xc5, 0xc6, 0x09, 0x57, 0xa9, 0xfc, 0x57, 0x51, 0x95, 0x5e, 0xb4, 0x1c, 0x2f, 0xe8, 0x4f, 0x1e,
	0x84, 0x8f, 0x53, 0xf9, 0x81, 0xcb, 0x08, 0x7f, 0xf5, 0x30, 0x75, 0x7f, 0xce, 0xad, 0x1d, 0xaf,
	0x5a, 0x3b, 0xcd, 0xcf, 0x61, 0x50, 0xd8, 0x61, 0xfb, 0x91, 0x06, 0x27, 0x60, 0x96, 0x22, 0x57,
	0x01, 0x30, 0x37, 0x89, 0x3a, 0x3c, 0x4e, 0x4c, 0xcf, 0x77, 0x98, 0xc3, 0xc1, 0x74, 0xc7, 0xd1,
	0xb1, 0x6e, 0xea, 0x80, 0xe1, 0x9f, 0x58, 0x26, 0x6f, 0xed, 0x48, 0x59, 0xd2, 0xea, 0x05, 0x49,
	0xbf, 0x2c, 0x00, 0xd2, 0x6d, 0x76, 0x66, 0x8f, 0xe9, 0x5f, 0x2d, 0xd8, 0x2e, 0x6b, 0x04, 0x67,
	0x60, 0xd1, 0xa8, 0xcd, 0xa3, 0xef, 0x2b, 0x58, 0xb7, 0x73, 0xae, 0x00, 0xbb, 0xa5, 0xc1, 0xde,
	0x28, 0xc1, 0xb6, 0x38, 0xd7, 0xd4, 0xc8, 0x1d, 0xd8, 0x28, 0xa6, 0x5f, 0x61, 0xe9, 0x37, 0x5b,
	0xd6, 0xf5, 0x70, 0xdc, 0x66, 0xce, 0xcc, 0x32, 0x65, 0xe4, 0xb2, 0xc8, 0x27, 0xb0, 0x96, 0x99,
	0x18, 0x5e, 0x98, 0x52, 0x0b, 0xb4, 0x4e, 0x95, 0x89, 0x70, 0x0f, 0xd2, 0x24, 0xd2, 0x46, 0xb9,
	0xc5, 0xcf, 0xe1, 0x20, 0xb8, 0x52, 0xa4, 0x12, 0x8b, 0x78, 0xd9, 0x80, 0x6b, 0x49, 0x94, 0x1c,
	0x99, 0x72, 0x08, 0xdb, 0x46, 0x62, 0x49, 0x94, 0x0c, 0xd2, 0x71, 0xa2, 0x84, 0x0c, 0x3b, 0xfa,
	0x37, 0x0b, 0x12, 0xbd, 0x16, 0x5c, 0x0e, 0x27, 0x7b, 0xaf, 0x52, 0xa9, 0xf2, 0x10, 0xcc, 0x92,
	0x70, 0x58, 0x74, 0x07, 0x48, 0x0d, 0x79, 0xec, 0x51, 0xb7, 0xcf, 0xbc, 0x6a, 0x9f, 0xd1, 0x1f,
	0xb1, 0x2e, 0x79, 0xae, 0x1a, 0x13, 0xf6, 0x75, 0x09, 0x82, 0xe1, 0xdb, 0x19, 0x7b, 0x49, 0xe3,
	0xdb, 0x64, 0xc1, 0xaa, 0xfa, 0x95, 0x2e, 0x6e, 0xd5, 0xba, 0x18, 0x17, 0x02, 0x3f, 0x52, 0x87,
	0x42, 0x8e, 0xec, 0x68, 0x2b, 0x69, 0x7a, 0x1b, 0x2e, 0x34, 0x38, 0x85, 0xb1, 0x5c, 0x05, 0x30,
	0xbe, 0xef, 0x45, 0x91, 0xb4, 0xd1, 0x38, 0x1c, 0x7a, 0x04, 0x9b, 0x4c, 0xd4, 0x16, 0x44, 0x73,
	0xdd, 0x51, 0x58, 0x95, 0xb6, 0xb4, 0x9d, 0xfe, 0xaa, 0xf0, 0xdc, 0x5c, 0xf8, 0x95, 0x5c, 0xd0,
	0x6b, 0xb0, 0xee, 0xfc, 0xce, 0x69, 0x28, 0xff, 0xaa, 0x97, 0x17, 0xce, 0x5f, 0xc1, 0x4c, 0x01,
	0x9c, 0xec, 0xdb, 0xa7, 0xd8, 0x13, 0x5a, 0x4f, 0x44, 0xae, 0x77, 0x35, 0x6e, 0xbd, 0x8e, 0xfd,
	0xd9, 0x3a, 0x6e, 0x5a, 0xd1, 0x8b, 0x73, 0x56, 0xb4, 0x13, 0x6d, 0x50, 0x8d, 0xf6, 0x06, 0x0e,
	0xff, 0xaa, 0xfb, 0xa7, 0x85, 0xfc, 0xb3, 0x07, 0x17, 0xad, 0xcd, 0xde, 0x6b, 0x29, 0xc4, 0x48,
	0x24, 0xea, 0xbf, 0x09, 0x9a, 0xc2, 0x2a, 0xc7, 0x17, 0xad, 0x2b, 0x76, 0x3d, 0x54, 0x78, 0x67,
	0x68, 0xf0, 0xf9, 0xc1, 0xde, 0x2c, 0x73, 0xe5, 0x38, 0x7e, 0x5a, 0xb8, 0xbf, 0xb7, 0x60, 0xad,
	0xb8, 0x12, 0x4f, 0x9e, 0x76, 0xd3, 0x61, 0xc4, 0x87, 0xce, 0xb8, 0x5b, 0xab, 0xec, 0x16, 0x56,
	0xd7, 0xc2, 0x44, 0x9a, 0x8b, 0x12, 0x77, 0x55, 0xb9, 0x18, 0x7d, 0xbc, 0x54, 0xea, 0x7c, 0xd2,
	0x87, 0x8d, 0xa3, 0xea, 0x46, 0xd3, 0x08, 0xb4, 0x59, 0x9d, 0xdd, 0x30, 0x7c, 0x83, 0xb3, 0x0d,
	0x5f, 0x7d, 0x38, 0x99, 0x83, 0x60, 0x82, 0xe8, 0xc4, 0x03, 0x6e, 0xf7, 0xeb, 0x0c, 0x9f, 0x5c,
	0x83, 0xad, 0x38, 0xd7, 0xfd, 0xcc, 0xd5, 0x9b, 0x17, 0xe3, 0xc1, 0x40, 0xe4, 0xb9, 0xbd, 0x01,
	0x67, 0x05, 0x74, 0x0f, 0x56, 0x0a, 0x20, 0x11, 0xf4, 0xe9, 0x5d, 0xed, 0xb9, 0x77, 0xf5, 0x49,
	0xc7, 0x03, 0x7d, 0x0e, 0xab, 0x7a, 0x20, 0x9e, 0x9c, 0x8a, 0x06, 0x94, 0x5a, 0x8d, 0x28, 0xd1,
	0x3e, 0x80, 0x7d, 0xef, 0xb4, 0x32, 0xb8, 0x8d, 0x03, 0x38, 0x4e, 0x94, 0xd9, 0x0f, 0xd3, 0x0b,
	0x75, 0x75, 0xa0, 0x43, 0x52, 0xba, 0x86, 0xad, 0x55, 0x85, 0x47, 0x97, 0x21, 0x78, 0x34, 0xca,
	0xd4, 0x84, 0xde, 0x82, 0xf6, 0x81, 0x4c, 0x5f, 0xe1, 0xf4, 0x6a, 0x72, 0xd1, 0x6b, 0x76, 0x71,
	0x07, 0xc0, 0x5a, 0x65, 0xe6, 0xa0, 0x7e, 0x37, 0x16, 0xe3, 0x38, 0x79, 0xfd, 0x50, 0x0c, 0xb9,
	0x39, 0xef, 0x7c, 0x56, 0xe1, 0xd1, 0x5d, 0x58, 0xd7, 0x16, 0x78, 0x0c, 0x19, 0x2b, 0x6c, 0x1a,
	0x99, 0x62, 0x12, 0xf4, 0xb9, 0x64, 0x8c, 0x5c, 0x16, 0xe5, 0xb0, 0xf9, 0x3d, 0xd6, 0xe5, 0x43,
	0xae, 0xf8, 0xff, 0x53, 0xe7, 0xbb, 0x7f, 0xb6, 0xa1, 0xfd, 0xc0, 0x7e, 0x85, 0x91, 0x27, 0x38,
	0x65, 0xdd, 0xa3, 0x93, 0x74, 0xb5, 0x79, 0xe3, 0x87, 0x40, 0x37, 0x6c, 0x94, 0x65, 0xc3, 0x09,
	0x5d, 0x20, 0xf7, 0xa1, 0xcd, 0x8a, 0xcf, 0x8d, 0x7f, 0xfa, 0xc6, 0x0e, 0x2c, 0x99, 0xca, 0x24,
	0x44, 0x6b, 0x55, 0xfa, 0xbd, 0xbb, 0x59, 0xe1, 0x19, 0x8b, 0x2f, 0x20, 0xd0, 0x85, 0x43, 0xb6,
	0xb4, 0xd0, 0x2d, 0xca, 0xee, 0x86, 0xcb, 0x32, 0xea, 0x8f, 0x60, 0xad, 0xb2, 0xf2, 0xc8, 0xfc,
	0x4d, 0xdb, 0xbd, 0xd8, 0x24, 0x32, 0xcf, 0x7c, 0x0b, 0x5b, 0x33, 0xdb, 0x93, 0x5c, 0xd1, 0xfa,
	0xf3, 0x56, 0x7d, 0xf7, 0xa3, 0x79, 0x62, 0xf3, 0xa4, 0x4e, 0x84, 0xbb, 0x00, 0x4a, 0x10, 0x1b,
	0x96, 0x5a, 0x09, 0xe2, 0xcc, 0xc6, 0xa0, 0x0b, 0xe4, 0xbb, 0x72, 0x2d, 0x58, 0x41, 0x39, 0x64,
	0xc9, 0x65, 0xd7, 0xac, 0xbe, 0x34, 0xba, 0xdd, 0x39, 0x52, 0xf3, 0xec, 0x1d, 0xe8, 0x94, 0xfb,
	0x98, 0x9c, 0xb7, 0xaa, 0xb5, 0xdc, 0x9e, 0xab, 0xb3, 0x8d, 0xe9, 0x2d, 0x58, 0x71, 0x7a, 0x96,
	0x14, 0xc0, 0xd6, 0xbb, 0xb8, 0x0b, 0x5a, 0x60, 0x9a, 0x74, 0x81, 0xec, 0x42, 0xe7, 0x89, 0xe0,
	0x52, 0xdd, 0x17, 0x5c, 0x11, 0x47, 0x74, 0x52, 0x62, 0x3e, 0x83, 0x40, 0xb7, 0x1c, 0x59, 0xb3,
	0x3a, 0xa6, 0xcd, 0x6d, 0x29, 0x4c, 0xfb, 0x97, 0x2e, 0x90, 0x1b, 0xd0, 0x29, 0xbb, 0xb3, 0xae,
	0x7e, 0x6e, 0x4a, 0x96, 0xcd, 0x4b, 0x17, 0xc8, 0x0f, 0x70, 0xc9, 0xdc, 0xeb, 0xc5, 0x36, 0x70,
	0x07, 0xfd, 0x95, 0xb2, 0xae, 0x9b, 0xee, 0xf9, 0xae, 0x2b, 0x9e, 0xfd, 0x1e, 0xa2, 0x0b, 0x3b,
	0x1e, 0xd9, 0x81, 0x4e, 0xd9, 0xfb, 0x16, 0xe1, 0xfa, 0x2c, 0xa8, 0x41, 0xf4, 0x1c, 0x3e, 0x76,
	0x3e, 0x79, 0x1a, 0xbf, 0x23, 0x6c, 0x55, 0xce, 0xf9, 0x30, 0xaa, 0xbd, 0x77, 0x0f, 0x2e, 0xb9,
	0xff, 0x88, 0xa9, 0xbe, 0xb4, 0x55, 0x69, 0x3f, 0x94, 0x57, 0xad, 0x5f, 0x2d, 0xe9, 0x7f, 0xe9,
	0xdc, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x24, 0x38, 0x11, 0xf6, 0xe4, 0x11, 0x00, 0x00,
}
