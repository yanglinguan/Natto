syntax = "proto3";

package rpc;

service Carousel {
    rpc ReadAndPrepare(ReadAndPrepareRequest) returns (ReadAndPrepareReply) {}
    rpc ReadOnly(ReadAndPrepareRequest) returns (ReadAndPrepareReply) {}
    rpc Commit(CommitRequest) returns (CommitReply) {}
    rpc Abort(AbortRequest) returns (AbortReply) {}

    // RPCs for transaction participants sending prepare result to transaction coordinators
    rpc PrepareResult(PrepareResultRequest) returns (PrepareResultReply) {}
    rpc FastPrepareResult(FastPrepareResultRequest) returns (FastPrepareResultReply) {}

    // leader send this message to coordinator requiring reverse the reorder
    rpc ReverseReorder(ReverseReorderRequest) returns (ReverseReorderReply) {}
    // coordinator send this message to coordinator indicating if reverse success
    rpc ReverseReorderAgreement(ReverseAgreementRequest) returns (ReverseAgreementReply) {}
    // coordinator to leader to re-prepare
    rpc RePrepare(RePrepareRequest) returns (RePrepareReply) {}

    // print final result
    rpc PrintStatus(PrintStatusRequest) returns (Empty) {}

    rpc HeartBeat(Empty) returns (PrepareResultReply) {}

    //// Network Latency Monitoring
    // For clients
    rpc Probe(ProbeReq) returns (ProbeReply){}
    rpc ProbeTime(ProbeReq) returns (ProbeTimeReply){}

    // stream rpc sending the read result from coordinator to client
    // client sends to coordinator
    rpc ReadResultFromCoordinator(ReadRequestToCoordinator) returns (stream ReadReplyFromCoordinator) {}
    // client sends write data to coordinator
    rpc WriteData(WriteDataRequest) returns (Empty) {}
    // data server sends to coordinator
    rpc ForwardReadRequestToCoordinator(ForwardReadToCoordinator) returns (Empty) {}
    rpc CommitResultToCoordinator(CommitResult) returns (Empty) {}
}

message CommitResult {
    string txnId = 1;
    bool result = 2;
}

message Transaction {
    string txnId = 1;
    repeated string readKeyList = 2;
    repeated string writeKeyList = 3;
    repeated int32 participatedPartitionIds = 4;
    repeated int64 estimateArrivalTimes = 5;
    int32 coordPartitionId = 6; // Coordination partition id
    bool readOnly = 7;
    bool highPriority = 8;
}

message ReadAndPrepareRequest {
    Transaction txn = 1;
    bool isRead = 2;
    bool isNotParticipant = 3; // If the server is a participant of the transaction
    int64 timestamp = 4;
    string clientId = 5;
}

message KeyValueVersion {
    string key = 1;
    string value = 2;
    uint64 version = 3;
}

message KeyVersion {
    string key = 1;
    uint64 version = 2;
}

message KeyValue {
    string key = 1;
    string value = 2;
}

message ReadAndPrepareReply {
    repeated KeyValueVersion keyValVerList = 1;
    int32 leaderId = 2; // partition leader's Id
    bool isLeader = 3;
    int32 status = 4;
    string txnId = 5;
}

message ReadReplyFromCoordinator {
    repeated KeyValueVersion keyValVerList = 1;
    string txnId = 2;
}

message ForwardReadToCoordinator {
    string clientId = 1;
    string txnId = 2;
    int32 coorId = 3;
    repeated string parentTxns = 4;
    repeated int32 idx = 5;
    repeated string keyList = 6;
}

message ReadRequestToCoordinator {
    string clientId = 1;
}

message PrepareResultRequest {
    string txnId = 1;
    repeated KeyVersion readKeyVerList = 2;
    repeated KeyVersion writeKeyVerList = 3;
    int32 partitionId = 4;
    int32 prepareStatus = 5;
    repeated int32 conditions = 6;
    repeated string reorder = 7;
    repeated string forward = 8;
    int32 counter = 9;
}

message PrepareResultReply {
    int32 leaderId = 1;
}

message FastPrepareResultRequest {
    PrepareResultRequest prepareResult = 1;
    bool isLeader = 2;
    uint64 raftTerm = 3;
}

message FastPrepareResultReply {
    int32 leaderAddr = 1;
}

message RePrepareRequest {
    string txnId = 1;
    string requestTxnId = 2;
    int32 counter = 3;
}

message RePrepareReply {
    int32 leaderId = 1;
}

message ReverseReorderRequest {
    string txnId = 1;
    string reorderedTxnId = 2;
    int32 partitionId = 3;
    int32 coordPartitionId = 4;
    int32 counter = 5;
}

message ReverseReorderReply {
    int32 leaderId = 1;
}

message ReverseAgreementRequest {
    string txnId = 1;
    string reorderedTxnId = 2;
    bool agreeReorder = 3;
    int32 partitionId = 4;
    int32 counter = 5;
}

message ReverseAgreementReply {
    int32 leaderId = 1;
}

message CommitRequest {
    string txnId = 1;
    repeated KeyValue writeKeyValList = 2;
    repeated bool resultFromLeader = 3;
    bool fromCoordinator = 4;
    repeated KeyVersion readKeyVerList = 5;
    bool isReadAnyReplica = 6;
    bool isFastPathSuccess = 7;
}

message CommitReply {
    bool result = 1;
    int32 leaderId = 2;
}

message AbortRequest {
    string txnId = 1;
    bool fromCoordinator = 2;
}

message AbortReply {
    int32 leaderId = 1;
}

message PrintStatusRequest {
    int32 committedTxn = 1;
}

message Empty {
}

message ProbeReq{
    bool fromCoordinator = 1;
}

message ProbeReply {
    int64 queuingDelay = 1; //in ns
}

message ProbeTimeReply {
    int64 processTime = 1; // in ns
}

message WriteDataRequest {
    string txnId = 1;
    repeated KeyValue writeKeyValList = 2;
}
